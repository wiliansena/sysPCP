from datetime import timedelta
import os 
from flask import Flask, session
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_wtf.csrf import CSRFProtect
from flask_login import LoginManager, logout_user, current_user
from config import Config

# ğŸ”¹ Inicializa a aplicaÃ§Ã£o Flask
app = Flask(__name__)
app.config.from_object(Config)  # Carrega as configuraÃ§Ãµes do config.py

# ğŸ”¹ ConfiguraÃ§Ã£o do tempo de sessÃ£o
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)  # ğŸ”¹ Define o tempo de expiraÃ§Ã£o da sessÃ£o

# ğŸ”¹ ConfiguraÃ§Ã£o do banco de dados
db = SQLAlchemy(app)
migrate = Migrate(app, db)

# ğŸ”¹ ProteÃ§Ã£o CSRF
csrf = CSRFProtect(app)

# ğŸ”¹ ConfiguraÃ§Ã£o do diretÃ³rio de upload
app.config['UPLOAD_FOLDER'] = Config.UPLOAD_FOLDER

# ğŸ”¹ ConfiguraÃ§Ã£o do Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "auth.login"  # Define a tela de login padrÃ£o
login_manager.login_message = "VocÃª precisa estar logado para acessar esta pÃ¡gina."

@login_manager.user_loader
def load_user(user_id):
    from app.models import Usuario  # ğŸ”¹ ImportaÃ§Ã£o dentro da funÃ§Ã£o para evitar erro de importaÃ§Ã£o circular
    return Usuario.query.get(int(user_id))

# ğŸ”¹ Antes de cada requisiÃ§Ã£o, tornar a sessÃ£o permanente e resetar o tempo
@app.before_request
def verificar_sessao():
    if current_user.is_authenticated:
        session.permanent = True  # ğŸ”¹ Garante que a sessÃ£o seja permanente
        session.modified = True   # ğŸ”¹ Reseta o tempo de expiraÃ§Ã£o com cada requisiÃ§Ã£o
    else:
        logout_user()  # ğŸ”¹ Faz logout se a sessÃ£o expirou

# ğŸ”¹ ImportaÃ§Ã£o de Blueprints (rotas)
from app.routes import bp as routes_bp
app.register_blueprint(routes_bp)

from app.auth.routes import bp as auth_bp
app.register_blueprint(auth_bp, url_prefix='/auth')

# ğŸ”¹ CriaÃ§Ã£o do diretÃ³rio de uploads, se nÃ£o existir
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])
