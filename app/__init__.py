from datetime import timedelta
import os
from flask import Flask, session
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_wtf.csrf import CSRFProtect
from flask_login import LoginManager, logout_user, current_user
from config import Config

db = SQLAlchemy()
migrate = Migrate()
csrf = CSRFProtect()
login_manager = LoginManager()

def create_app():

    app = Flask(__name__)
    # Torna o getattr disponÃ­vel nos templates Jinja2
    app.jinja_env.globals.update(getattr=getattr)

    app.config.from_object(Config)  # Carrega as configuraÃ§Ãµes do config.py

    # ğŸ”¹ ConfiguraÃ§Ã£o do tempo de sessÃ£o
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

    # ğŸ”¹ InicializaÃ§Ã£o do banco de dados
    db.init_app(app)
    migrate.init_app(app, db)

    # ğŸ”¹ ProteÃ§Ã£o CSRF
    csrf.init_app(app)

    # ğŸ”¹ ConfiguraÃ§Ã£o do diretÃ³rio de upload
    app.config['UPLOAD_FOLDER'] = Config.UPLOAD_FOLDER

    # ğŸ”¹ ConfiguraÃ§Ã£o do Flask-Login
    login_manager.init_app(app)
    login_manager.login_view = "auth.login"
    login_manager.login_message = "VocÃª precisa estar logado para acessar esta pÃ¡gina."

    @login_manager.user_loader
    def load_user(user_id):
        """Carrega o usuÃ¡rio ao fazer login e garante que as permissÃµes sÃ£o carregadas corretamente."""
        from app.models import Usuario  # ImportaÃ§Ã£o dentro da funÃ§Ã£o para evitar problemas de importaÃ§Ã£o circular
        usuario = Usuario.query.get(int(user_id))
        
        if usuario:
            _ = usuario.todas_permissoes  # ğŸ”¹ Garante que as permissÃµes sÃ£o carregadas corretamente
        
        return usuario

    # ğŸ”¹ Antes de cada requisiÃ§Ã£o, manter a sessÃ£o ativa e garantir permissÃµes
    @app.before_request
    def verificar_sessao():
        if current_user.is_authenticated:
            session.permanent = True
            session.modified = True
            
            # ğŸ”¹ Garante que as permissÃµes estÃ£o carregadas corretamente no usuÃ¡rio
            _ = current_user.todas_permissoes
        else:
            logout_user()

    # ğŸ”¹ ImportaÃ§Ã£o de Blueprints (mÃ³dulos de rotas)
    from app.routes import bp as routes_bp
    app.register_blueprint(routes_bp)

    from app.auth.routes import bp as auth_bp
    app.register_blueprint(auth_bp, url_prefix='/auth')

    # ğŸ”¹ CriaÃ§Ã£o do diretÃ³rio de uploads, se nÃ£o existir
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])

    return app
